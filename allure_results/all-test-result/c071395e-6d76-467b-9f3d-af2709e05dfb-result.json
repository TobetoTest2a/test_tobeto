{"name": "Kayıt edilen üniversite bilgilerini silme", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1274, -1428)\n  (Session info: chrome=124.0.6367.119)\nStacktrace:\n0   chromedriver                        0x000000010d522a18 chromedriver + 5216792\n1   chromedriver                        0x000000010d51a653 chromedriver + 5183059\n2   chromedriver                        0x000000010d08c527 chromedriver + 406823\n3   chromedriver                        0x000000010d0decf3 chromedriver + 744691\n4   chromedriver                        0x000000010d0dcbc2 chromedriver + 736194\n5   chromedriver                        0x000000010d0da5f7 chromedriver + 726519\n6   chromedriver                        0x000000010d0d99c4 chromedriver + 723396\n7   chromedriver                        0x000000010d0cd009 chromedriver + 671753\n8   chromedriver                        0x000000010d0fa702 chromedriver + 857858\n9   chromedriver                        0x000000010d0cc998 chromedriver + 670104\n10  chromedriver                        0x000000010d0fa8be chromedriver + 858302\n11  chromedriver                        0x000000010d1196bf chromedriver + 984767\n12  chromedriver                        0x000000010d0fa4a3 chromedriver + 857251\n13  chromedriver                        0x000000010d0cafe3 chromedriver + 663523\n14  chromedriver                        0x000000010d0cb92e chromedriver + 665902\n15  chromedriver                        0x000000010d4e0930 chromedriver + 4946224\n16  chromedriver                        0x000000010d4e69e4 chromedriver + 4970980\n17  chromedriver                        0x000000010d4c142e chromedriver + 4817966\n18  chromedriver                        0x000000010d4e74f9 chromedriver + 4973817\n19  chromedriver                        0x000000010d4b16b4 chromedriver + 4753076\n20  chromedriver                        0x000000010d509ba8 chromedriver + 5114792\n21  chromedriver                        0x000000010d509d67 chromedriver + 5115239\n22  chromedriver                        0x000000010d51a273 chromedriver + 5182067\n23  libsystem_pthread.dylib             0x00007ff813eee4f4 _pthread_start + 125\n24  libsystem_pthread.dylib             0x00007ff813eea00f thread_start + 15", "trace": "self = <test_egitim_hayatim.TestEgitimHayatim testMethod=test6_kayit_edilen_universite_bilgilerini_silme>\n\n    @allure.title(\"Kayıt edilen üniversite bilgilerini silme\")\n    def test6_kayit_edilen_universite_bilgilerini_silme(self):\n        giris=Giris(self.driver)\n        profile_tikla=Yabanci_dil_ekle(self.driver)\n        egitimHayatim= EgitimHayatim(self.driver)\n        egitimHayatim=Egitim_hayatim_ekle(self.driver)\n        egitimHayatim = Universiteye_devam_ediyor_butonu(self.driver)\n        egitimHayatim = Kayit_Edilen_Universiteyi_Silme(self.driver)\n    \n        giris.ana_giris()\n        profile_tikla.profilim_kismina_tikla()\n        profile_tikla.profil_bilgileri_tikla()\n        egitimHayatim.egitim_hayatim_butonuna_tikla()\n        egitimHayatim.sayfayi_asagi_kaydir()\n>       egitimHayatim.universite_kaydini_sil()\n\ntests/test_egitim_hayatim.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/egitim_hayatim.py:331: in universite_kaydini_sil\n    self.wait_element_visibility(KAYDI_SIL).click()\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1078380d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff813eee4f4 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff813eea00f thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1274, -1428)\nE         (Session info: chrome=124.0.6367.119)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010d522a18 chromedriver + 5216792\nE       1   chromedriver                        0x000000010d51a653 chromedriver + 5183059\nE       2   chromedriver                        0x000000010d08c527 chromedriver + 406823\nE       3   chromedriver                        0x000000010d0decf3 chromedriver + 744691\nE       4   chromedriver                        0x000000010d0dcbc2 chromedriver + 736194\nE       5   chromedriver                        0x000000010d0da5f7 chromedriver + 726519\nE       6   chromedriver                        0x000000010d0d99c4 chromedriver + 723396\nE       7   chromedriver                        0x000000010d0cd009 chromedriver + 671753\nE       8   chromedriver                        0x000000010d0fa702 chromedriver + 857858\nE       9   chromedriver                        0x000000010d0cc998 chromedriver + 670104\nE       10  chromedriver                        0x000000010d0fa8be chromedriver + 858302\nE       11  chromedriver                        0x000000010d1196bf chromedriver + 984767\nE       12  chromedriver                        0x000000010d0fa4a3 chromedriver + 857251\nE       13  chromedriver                        0x000000010d0cafe3 chromedriver + 663523\nE       14  chromedriver                        0x000000010d0cb92e chromedriver + 665902\nE       15  chromedriver                        0x000000010d4e0930 chromedriver + 4946224\nE       16  chromedriver                        0x000000010d4e69e4 chromedriver + 4970980\nE       17  chromedriver                        0x000000010d4c142e chromedriver + 4817966\nE       18  chromedriver                        0x000000010d4e74f9 chromedriver + 4973817\nE       19  chromedriver                        0x000000010d4b16b4 chromedriver + 4753076\nE       20  chromedriver                        0x000000010d509ba8 chromedriver + 5114792\nE       21  chromedriver                        0x000000010d509d67 chromedriver + 5115239\nE       22  chromedriver                        0x000000010d51a273 chromedriver + 5182067\nE       23  libsystem_pthread.dylib             0x00007ff813eee4f4 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff813eea00f thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "start": 1714816680838, "stop": 1714816705757, "uuid": "d9b8abb7-cb23-46bc-816e-0f1c74e5e937", "historyId": "e8acd09e89f955696764a23e38d88a0e", "testCaseId": "e8acd09e89f955696764a23e38d88a0e", "fullName": "tests.test_egitim_hayatim.TestEgitimHayatim#test6_kayit_edilen_universite_bilgilerini_silme", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_egitim_hayatim"}, {"name": "subSuite", "value": "TestEgitimHayatim"}, {"name": "host", "value": "ZEHRA-MacBook-Air.local"}, {"name": "thread", "value": "49633-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_egitim_hayatim"}]}